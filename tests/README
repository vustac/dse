Test descriptions

This document lists all tests that are defined in the tests directory of dse along with a
  description of each and characteristics for running the test.
Each test can be generated and run by the make_tests.sh and run_tests.sh scripts using the value
  from the 'Name' entry for the test listing as the value for 'TestName' for the scripts.

  ./make_tests.sh [options] [TestName]

  where [options] are:
    -t or --test  - don't actually build anything, dut display the commands used to build
    -r or --run   - after building the test, run it (and verify results)

    This script will build the executable jar file (with full debugging enabled) from the source
    file of the same name found in the edu/vanderbilt/isis/ path cotained in the current dir.
    It will then build the instrumented jar file (after extracting debugging info) from this file.
    Both files will be placed in the results/TestName directory that will be created in the
    directory this script is in.
    If the '-r' option is specified, it will then run the instrumented jar file and, using the
    check_results.sh script, will validate the dansolver solution found.
    
    If no test name is specified it will build and run all tests found in the edu subdirectory.

  ./run_tests.sh [options] TestName

  where [options] are:
    -t or --test   - don't run the test, dut display the commands that would be used to build it.
    -v or --verify - after running the test, verify the results (if danfig & check_results.sh found)

    This script will build the instrumented jar file (after extracting debugging info) from the
    original jar file if the instrumented version was not found. It will then run it.
    If the -v option is specified and both a danfig and check_results.sh file were found, it will
    then use the check_results.sh script to validate the dansolver solution found.

Note that the Source location listed is relative to the edu/vanderbilt/isis/ path in the $DSE/tests
directory.

-------------------------------------------------------------
Server tests:
-------------------------------------------------------------

  Name:        SimpleNano
  Command:      run_nano.sh
  Source:       nano/SimpleNano.java
  Description:  a simple NanoHTTPD server example - reads simple POST from user
  Symbolic:     <none> (auto-generated)
  Operation:    run test & verify solution generated by dansolver is: parsedInt = 4
  
  Name:        SimpleServer
  Command:      run_paper.sh
  Source:       paper_example/SimpleServer.java
  Description:  same as SimpleNano, but uses POST parameters a & b sent from the user.
  Symbolic:     (Integer) 'a' = slot 1 of SimpleServer.getResponse
                (Integer) 'b' = slot 2 of SimpleServer.getResponse
  Operation:    run test & send "a=1&b=0" and verify solution generated by dansolver is: a = 0
  
-------------------------------------------------------------
Basic feature tests:
-------------------------------------------------------------

  Name:        ConstructorTest
  Command:      run_constructor_test
  Source:       constructors/ConstructorTest.java
  Description:  A basic test that verifies that symbolics function properly for a numeric value.
  Symbolic:     (Double) 'y' = slot 2 of ConstructorTest.<init>
  Operation:    run test & verify solution generated by dansolver is: y = 89/25

  Name:        ByteRangeTest
  Command:      run_byte_test
  Source:       type_tests/bytes/ByteRangeTest.java
  Description:  Verifies symbolics process range test for byte values (rolls over from 127 to -128).
  Symbolic:     (Integer) 'b' = slot 0 of ByteRangeTest.testRange
  Operation:    run test & verify solution generated by dansolver is: b = 127

-------------------------------------------------------------
Thread tests:
-------------------------------------------------------------

  Name:        ThreadTest
  Command:      run_thread_test
  Source:       threads/simple/ThreadTest.java
  Description:  Main creates 2 threads. Thread 2 checks if int value in Holder Object is symbolic.
  Symbolic:     (Integer) 'x' = slot 1 of ThreadTest.setSymbolic
  Operation:    run test & verify solution generated by dansolver is: x = 16
      
  Name:        ThreadTestArrays
  Command:      run_thread_arrays_test
  Source:       threads/arrays/ThreadTestArrays.java
  Description:  Main creates 2 threads. Thread 2 checks if int entry of array in shared Holder
                Object is symbolic.
  Symbolic:     (Integer) 'x' = slot 1 of ThreadTestArrays.setSymbolic
  Operation:    run test & verify solution generated by dansolver is: x = 16

-------------------------------------------------------------
String tests:
-------------------------------------------------------------

  Name:        SymbolicStringEquals
  Command:      run_symbolic_string_equals
  Source:       strings/symbolic_equals/SymbolicStringEquals.java
  Description:  verifies symbolic comparison of string contents functions properly.
  Symbolic:     (String) 'str' = slot 0 of SymbolicStringEquals.symbolicEqualsTest
  Operation:    run test & verify solution generated by dansolver is: str = "abc123"
  
  Name:        SymbolicStringLength
  Command:      run_symbolic_string_length
  Source:       strings/symbolic_length/SymbolicStringLength.java
  Description:  verifies symbolic comparison of string length functions properly.
  Symbolic:     (String) 'str' = slot 0 of SymbolicStringLength.symbolicLengthTest
  Operation:    run test & verify solution generated by dansolver is: str = ""

-------------------------------------------------------------
Simple Array tests:
-------------------------------------------------------------

  Name:        BasicArray
  Command:      run_basic_array
  Source:       arrays/simple/BasicArray.java
  Description:  verifies data in an int array can be solved symbolicly.
  Symbolic:     (Integer array) 'arr' = slot 1 of BasicArray.testBasic
  Operation:    run test & verify solution generated by dansolver is: arr_1 = 7
  
  Name:        SymbolicMaximizeTest
  Command:      run_array_maximize
  Source:       arrays/maximize_test/SymbolicMaximizeTest.java
  Description:  verifies data in an int array can be solved for maximum value symbolicly.
                It does so by finding an index into the array that contains the largest value.
  Symbolic:     (Integer) 'index' = slot 0 of SymbolicMaximizeTest.testMaximize
  Operation:    run test & verify solution generated by dansolver is: index = 2
                NOTE: index = 16 is also indicated for an array index out-of-bounds solution,
                      since the array length is 10.

  Name:        SymbolicIndexArray
  Command:      run_symbolic_index_array
  Source:       arrays/symbolic_index/SymbolicIndexArray.java
  Description:  verifies index into an int array can be solved symbolicly.
                It does so by finding an index into the array that matches a specified value.
  Symbolic:     (Integer) 'index' = slot 0 of SymbolicIndexArray.testBasic
  Operation:    run test & verify solution generated by dansolver is: index = 4
                NOTE: index = 6 is also indicated for an array index out-of-bounds solution,
                      since the array length is 5.

-------------------------------------------------------------
Multi-dimensional Array tests:
-------------------------------------------------------------

  Name:        MultiArraySquare
  Command:      run_multiarray_nonsquare
  Source:       arrays/multidim_square/MultiArraySquare.java
  Description:  verifies entries in a 2-dim square array can be solved symbolicly.
                It does so by first initializing a 3x3 byte matrix with values starting at a given
                'value' and incrementing each successive entry column-by column then row-by-row.
                Then it checks for where the 1st entry is greater than the last entry filled.
                The solution is when the byte value rolls over from 127 to -128 between the first
                and last entry.
  Symbolic:     (Integer) 'value' = slot 3 of MultiArraySquare.testSquare
  Operation:    run test & verify solution generated by dansolver is: value = 119

  Name:        MultiArrayNonSquare
  Command:      run_multiarray_square
  Source:       arrays/multidim_nonsquare/MultiArrayNonSquare.java
  Description:  verifies entries in a 2-dim non-square array can be solved symbolicly.
                It does so by first initializing a 1x3 byte matrix with values starting at a given
                'value' and incrementing each successive entry column-by column then row-by-row.
                Then it checks for where the 1st entry is greater than the last entry filled.
                The solution is when the byte value rolls over from 127 to -128 between the first
                and last entry.
  Symbolic:     (Byte) 'value' = slot 3 of MultiArrayNonSquare.testNonSquare
  Operation:    run test & verify solution generated by dansolver is: value = 125

-------------------------------------------------------------
BufferedImage tests:
-------------------------------------------------------------

  Name:        BufferedImageTest
  Command:      run_buffered_image_test
  Source:       buffered_image/BufferedImageTest.java
  Description:  verifies entries in a BufferedImage Object can be solved symbolicly.
                It does so by defining a 2x2 bit iage Object having the (0,0) pixel set to a
                value of 17 and checking when the value read from the (0,1) entry is 1. 
  Symbolic:     (BufferedImage) 'image' = slot 0 of BufferedImageTest.makeImage
  Operation:    run test & verify solution generated by dansolver is: x_0_y_1 = 1

-------------------------------------------------------------
Juliet Test Suite tests:
-------------------------------------------------------------

  Name:        cwe129
  Command:      run_cwe129
  Source:       juliet/cwe129/SimpleCWE129.java
  Description:  Using input from BufferedReader, test for out-of-bounds access of array
  Symbolic:     AUTO (none required)
  Operation:    run test and POST the value "1" to HTTP port 8080. Verify the solution generated by
                dansolver is: parsedInt = 6.
      
  Name:        cwe606
  Command:      run_cwe606
  Source:       juliet/cwe606/SimpleCWE606.java
  Description:  Using input from BufferedReader, test for unconstrained loop condition
  Symbolic:     AUTO (none required)
  Operation:    run test and POST the value "1" to HTTP port 8080. Verify the solution generated by
                dansolver is: parsedInt = 0 (parsedInt = 1073741824 is an additional solution)
                (the number of soulutions you get should be 1 + the value you enter. The value of the
                first N values should be 0 to N-1 and the last should be 1073741824 = x4000000).

---------------------------------------------------------------------------------------------------
THE FOLLOWING TESTS DO NOT USE SYMBOLICS AND ARE NOT PART OF THE AUTOMATED TESTS:
---------------------------------------------------------------------------------------------------

  Name:        RefReturnDouble
  Command:      run_double_from_ref
  Source:       uninstrumented_return/ref_return_double/RefReturnDouble.java
  Description:  verifies a boxed Double value returned as an Object from an uninstrumented method
                gets converted correctly.
  Symbolic:     <none> (auto-generated)
  Operation:    run test & verify the value returned from LibReturnObject.getDoubleObject(index) is
                converted to Double correctly.

  Name:        RefReturnArray
  Command:      run_array_from_ref
  Source:       uninstrumented_return/ref_return_array/RefReturnArray.java
  Description:  verifies a simple array returned as an Object from an uninstrumented method
                gets converted correctly.
  Symbolic:     <none> (auto-generated)
  Operation:    run test & verify the value returned from LibReturnObject.getArrayObject(index) is
                converted to a String[] correctly.

  Name:        RefReturnMultiArray
  Command:      run_multiarray_from_ref
  Source:       uninstrumented_return/ref_return_multiarray/RefReturnMultiArray.java
  Description:  verifies a multi-dimensional array returned as an Object from an uninstrumented
                method gets converted correctly.
  Symbolic:     <none>
  Operation:    run test & verify the value returned from LibReturnObject.getMultiArrayObject(index)
                is converted to Integer[][] correctly.
