Test descriptions

The following are name of the tests that are included in the tests directory of dse.
Each test can be run from the specified command.
The location of the source code for each test is specified from the base path:
  $TESTS/edu/vanderbilt/isis/
  where $TESTS is the location of this tests directory.
For all tests, set the specified parameter as symbolic and (optionally) enable all debug flags
  prior to running.

-------------------------------------------------------------
Special tests:
-------------------------------------------------------------

  Name:        SimpleNano
  Command:      run_nano.sh
  Source:       nano/SimpleNano.java
  Description:  a simple NanoHTTPD server example - reads simple POST from user
  Symbolic:     'value' = slot 5 of SimpleNano.serve(Lfi/iki/elonen/NanoHTTPD$IHTTPSession;)
  Operation:    run test & verify solution generated by dansolver is: parsedInt = 4
  
  Name:        SimpleServer
  Command:      run_paper.sh
  Source:       paper_example/SimpleServer.java
  Description:  same as SimpleNano, but uses POST parameters a & b sent from the user.
  Symbolic:     'a' = slot 4 of SimpleServer.serve(Lfi/iki/elonen/NanoHTTPD$IHTTPSession;)
  Operation:    run test & verify solution generated by dansolver is: parsedInt = 0
  
-------------------------------------------------------------
Basic feature tests:
-------------------------------------------------------------

  Name:        ConstructorTest
  Command:      run_constructor_test
  Source:       constructors/ConstructorTest.java
  Description:  A basic test that verifies that symbolics function properly for a numeric value.
  Symbolic:     'y' = slot 2 of ConstructorTest.<init>(ID)
  Operation:    run test & verify solution generated by dansolver is: y = 89/25

  Name:        ByteRangeTest
  Command:      run_byte_test
  Source:       type_tests/bytes/ByteRangeTest.java
  Description:  Verifies symbolics process range test for byte values (rolls over from 127 to -128).
  Symbolic:     'b' = slot 0 of ByteRangeTest.testRange()
  Operation:    run test & verify solution generated by dansolver is: b = 127

-------------------------------------------------------------
Thread tests:
-------------------------------------------------------------

  Name:        ThreadTest
  Command:      run_thread_test
  Source:       threads/simple/ThreadTest.java
  Description:  Main creates 2 threads. Thread 2 checks if int value in Holder Object is symbolic.
  Symbolic:     edu/vanderbilt/isis/
  Operation:    run test &                                                            *****
      
  Name:        ThreadTestArrays
  Command:      run_thread_arrays_test
  Source:       threads/arrays/ThreadTestArrays.java
  Description:  Main creates 2 threads. Thread 2 checks if int entry of array in shared Holder Object is symbolic.
  Symbolic:     edu/vanderbilt/isis/
  Operation:    run test &                                                            *****

-------------------------------------------------------------
String tests:
-------------------------------------------------------------

  Name:        SymbolicStringEquals
  Command:      run_symbolic_string_equals
  Source:       strings/symbolic_equals/SymbolicStringEquals.java
  Description:  verifies symbolic comparison of string contents functions properly.
  Symbolic:     'str' = slot 0 of SymbolicStringEquals.symbolicEqualsTest()
  Operation:    run test & verify solution generated by dansolver is: str = "abc123"
  
  Name:        SymbolicStringLength
  Command:      run_symbolic_string_length
  Source:       strings/symbolic_length/SymbolicStringLength.java
  Description:  verifies symbolic comparison of string length functions properly.
  Symbolic:     'str' = slot 0 of SymbolicStringLength.symbolicLengthTest()
  Operation:    run test & verify solution generated by dansolver is: str = ""

-------------------------------------------------------------
Simple Array tests:
-------------------------------------------------------------

  Name:        BasicArray
  Command:      run_basic_array
  Source:       arrays/simple/BasicArray.java
  Description:  verifies data in an int array can be solved symbolicly.
  Symbolic:     'arr' = slot 1 of BasicArray.testBasic()
  Operation:    run test & verify solution generated by dansolver is:                 *****
  
  Name:        SymbolicMaximizeTest
  Command:      run_array_maximize
  Source:       arrays/maximize_test/SymbolicMaximizeTest.java
  Description:  verifies data in an int array can be solved for maximum value symbolicly.
                It does so by finding an index into the array that contains the largest value.
  Symbolic:     'index' (Integer) = slot 0 of SymbolicMaximizeTest.testMaximize()
  Operation:    run test & verify solution generated by dansolver is: index = 2
                NOTE: index = 16 is also indicated for an array index out-of-bounds solution,
                      since the array length is 10.

  Name:        SymbolicIndexArray
  Command:      run_symbolic_index_array
  Source:       arrays/symbolic_index/SymbolicIndexArray.java
  Description:  verifies index into an int array can be solved symbolicly.
                It does so by finding an index into the array that matches a specified value.
  Symbolic:     'index' (Integer) = slot 0 of SymbolicMaximizeTest.testMaximize()
  Operation:    run test & verify solution generated by dansolver is: index = 4
                NOTE: index = 6 is also indicated for an array index out-of-bounds solution,
                      since the array length is 5.

-------------------------------------------------------------
Multi-dimensional Array tests:
-------------------------------------------------------------

  Name:        MultiArraySquare
  Command:      run_multiarray_nonsquare
  Source:       arrays/multidim_square/MultiArraySquare.java
  Description:  verifies entries in a 2-dim square array can be solved symbolicly.
                It does so by first initializing a 3x3 byte matrix with values starting at a given
                'value' and incrementing each successive entry column-by column then row-by-row.
                Then it checks for where the 1st entry is greater than the last entry filled.
                The solution is when the byte value rolls over from 127 to -128 between the first
                and last entry.
  Symbolic:     'value' = slot 3 of MultiArraySquare.testSquare()
  Operation:    run test & verify solution generated by dansolver is: value = 119

  Name:        MultiArrayNonSquare
  Command:      run_multiarray_square
  Source:       arrays/multidim_nonsquare/MultiArrayNonSquare.java
  Description:  verifies entries in a 2-dim non-square array can be solved symbolicly.
                It does so by first initializing a 1x3 byte matrix with values starting at a given
                'value' and incrementing each successive entry column-by column then row-by-row.
                Then it checks for where the 1st entry is greater than the last entry filled.
                The solution is when the byte value rolls over from 127 to -128 between the first
                and last entry.
  Symbolic:     'value' = slot 3 of MultiArrayNonSquare.testNonSquare()
  Operation:    run test & verify solution generated by dansolver is: value = 125

-------------------------------------------------------------
BufferedImage tests:
-------------------------------------------------------------

  Name:        BufferedImageTest
  Command:      run_buffered_image_test
  Source:       buffered_image/BufferedImageTest.java
  Description:  verifies entries in a BufferedImage Object can be solved symbolicly.
                It does so by defining a 2x2 bit iage Object having the (0,0) pixel set to a
                value of 17 and checking when the value read from the (0,1) entry is 1. 
  Symbolic:     'image' = slot 0 of BufferedImageTest.makeImage()
  Operation:    run test & verify solution generated by dansolver is: x_0_y_1 = 1

-------------------------------------------------------------
Uninstrumented method returning Object that is not REF type tests:
-------------------------------------------------------------

  Name:        RefReturnDouble
  Command:      run_double_from_ref
  Source:       uninstrumented_return/ref_return_double/RefReturnDouble.java
  Description:  verifies a boxed Double value returned as an Object from an uninstrumented method gets converted correctly.
  Symbolic:     <none>
  Operation:    run test & verify the value returned from LibReturnObject.getDoubleObject(index) is converted to Double correctly.

  Name:        RefReturnArray
  Command:      run_array_from_ref
  Source:       uninstrumented_return/ref_return_array/RefReturnArray.java
  Description:  verifies a simple array returned as an Object from an uninstrumented method gets converted correctly.
  Symbolic:     <none>
  Operation:    run test & verify the value returned from LibReturnObject.getArrayObject(index) is converted to a String[] correctly.

  Name:        RefReturnMultiArray
  Command:      run_multiarray_from_ref
  Source:       uninstrumented_return/ref_return_multiarray/RefReturnMultiArray.java
  Description:  verifies a multi-dimensional array returned as an Object from an uninstrumented method gets converted correctly.
  Symbolic:     <none>
  Operation:    run test & verify the value returned from LibReturnObject.getMultiArrayObject(index) is converted to Integer[][] correctly.

-------------------------------------------------------------
Juliet Test Suite tests:
-------------------------------------------------------------

  Name:        cwe129
  Command:      run_cwe129
  Source:       juliet/cwe129/SimpleCWE129.java
  Description:  Using input from BufferedReader, test for out-of-bounds access of array
  Symbolic:     edu/vanderbilt/isis/
  Operation:    run test with HTTP input on port 8080 = 1 & verify the solution generated by dansolver is:
                parsedInt = 6.
      
  Name:        cwe606
  Command:      run_cwe606
  Source:       juliet/cwe606/SimpleCWE606.java
  Description:  Using input from BufferedReader, test for unconstrained loop condition
  Symbolic:     AUTO (none required)
  Operation:    run test with HTTP input on port 8080 = 1 & verify the 2 solutions generated by dansolver are: 
                parsedInt = 0 and parsedInt = 1073741824
                (the number of soulutions you get should be 1 + the value you enter. The value of the
                first N values should be 0 to N-1 and the last should be 1073741824 = x4000000).
  